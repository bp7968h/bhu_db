use std::fmt;

#[derive(Debug)]
pub enum TokenType {
    // Keywords
    DATABASE,
    DATABASES,
    TABLE,
    TABLES,
    SHOW,
    DESCRIBE,
    DROP,
    CREATE,
    UPDATE,
    INSERT,
    SELECT,
    DELETE,
    ALTER,
    INTO,
    VALUES,
    SET,
    ADD,
    FROM,
    WHERE,
    AND,
    OR,
    IS,
    NOT,
    NULL,
    ORDER,
    BY,
    ASC,
    DESC,
    LIMIT,
    AS,
    LIKE,
    IN,
    BETWEEN,
    JOIN,
    INNER,
    LEFT,
    RIGHT,
    CROSS,
    ON,
    UNION,
    ANY,
    ALL,
    GROUP,
    HAVING,
    EXISTS,
    MODIFY,
    CASE,
    WHEN,
    THEN,
    ELSE,
    END,
    SOME,
    VIEW,

    //Functions
    MIN,
    MAX,
    COUNT,
    AVG,
    SUM,
    IFNULL,
    COALESCE,

    //Constraints
    CONSTRAINT,
    UNIQUE,
    PRIMARY,
    FOREIGN,
    KEY,
    CHECK,
    DEFAULT,
    INDEX,
    REFERENCES,
    AUTO_INCREMENT,

    //Symbols and Operators
    UNDERSCORE,
    COMMA,
    SEMICOLON,
    LEFTPAREN,
    RIGHTPAREN,
    PLUS,
    MINUS,
    DIVIDE,
    PERCENT,
    ASTERISK,
    BWAND,
    BWOR,
    BWXOR,
    EQUAL,
    GREATERTHAN,
    LESSTHAN,
    GREATEREQUAL,
    LESSEQUAL,
    NOTEQUAL,
    PLUSEQUAL,
    MINUSEQUAL,
    ASTERISKEQUAL,
    DIVIDEEQUAL,
    PERCENTEQUAL,
    BWANDEQUAL,
    BWEXCEQUAL,
    BWOREQUAL,

    // Misc
    VARCHAR,
    INT,
    FLOAT,
    DATE,
    IDENTIFIER,
    EOF,
}

#[derive(Debug)]
pub enum Literal {
    StringLiteral(String),
    NumberLiteral(isize),
    FloatLiteral(f64),
    BooleanLiteral(bool),
    NullLiteral,
}

impl fmt::Display for Literal {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Literal::StringLiteral(s) => write!(f, "{}", s),
            Literal::NumberLiteral(n) => write!(f, "{}", n),
            Literal::FloatLiteral(fl) => write!(f, "{}", fl),
            Literal::BooleanLiteral(b) => write!(f, "{}", b),
            Literal::NullLiteral => write!(f, "Null"),
        }
    }
}
